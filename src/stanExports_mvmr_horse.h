// Generated by rstantools.  Do not edit by hand.

/*
    mrhorse is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    mrhorse is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with mrhorse.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_mvmr_horse_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 76> locations_array__ =
  {" (found before start of program)",
  " (in 'mvmr_horse', line 13, column 4 to column 21)",
  " (in 'mvmr_horse', line 14, column 4 to column 20)",
  " (in 'mvmr_horse', line 15, column 4 to column 20)",
  " (in 'mvmr_horse', line 16, column 4 to column 34)",
  " (in 'mvmr_horse', line 17, column 4 to column 25)",
  " (in 'mvmr_horse', line 18, column 4 to column 25)",
  " (in 'mvmr_horse', line 19, column 4 to column 20)",
  " (in 'mvmr_horse', line 20, column 4 to column 20)",
  " (in 'mvmr_horse', line 21, column 4 to column 17)",
  " (in 'mvmr_horse', line 22, column 4 to column 27)",
  " (in 'mvmr_horse', line 25, column 4 to column 33)",
  " (in 'mvmr_horse', line 26, column 4 to column 30)",
  " (in 'mvmr_horse', line 27, column 4 to column 47)",
  " (in 'mvmr_horse', line 28, column 4 to column 45)",
  " (in 'mvmr_horse', line 29, column 4 to column 62)",
  " (in 'mvmr_horse', line 30, column 4 to column 36)",
  " (in 'mvmr_horse', line 32, column 4 to column 37)",
  " (in 'mvmr_horse', line 33, column 4 to column 21)",
  " (in 'mvmr_horse', line 31, column 25 to column 41)",
  " (in 'mvmr_horse', line 31, column 4 to column 41)",
  " (in 'mvmr_horse', line 35, column 6 to column 45)",
  " (in 'mvmr_horse', line 36, column 21 to column 40)",
  " (in 'mvmr_horse', line 36, column 6 to column 40)",
  " (in 'mvmr_horse', line 37, column 6 to column 57)",
  " (in 'mvmr_horse', line 34, column 19 to line 38, column 5)",
  " (in 'mvmr_horse', line 34, column 4 to line 38, column 5)",
  " (in 'mvmr_horse', line 43, column 8 to column 43)",
  " (in 'mvmr_horse', line 45, column 8 to column 43)",
  " (in 'mvmr_horse', line 46, column 8 to column 116)",
  " (in 'mvmr_horse', line 47, column 8 to column 28)",
  " (in 'mvmr_horse', line 48, column 8 to column 28)",
  " (in 'mvmr_horse', line 49, column 8 to column 31)",
  " (in 'mvmr_horse', line 41, column 19 to line 50, column 5)",
  " (in 'mvmr_horse', line 41, column 4 to line 50, column 5)",
  " (in 'mvmr_horse', line 52, column 4 to column 21)",
  " (in 'mvmr_horse', line 53, column 4 to column 24)",
  " (in 'mvmr_horse', line 54, column 4 to column 43)",
  " (in 'mvmr_horse', line 57, column 8 to column 30)",
  " (in 'mvmr_horse', line 58, column 8 to column 36)",
  " (in 'mvmr_horse', line 56, column 19 to line 59, column 5)",
  " (in 'mvmr_horse', line 56, column 4 to line 59, column 5)",
  " (in 'mvmr_horse', line 5, column 4 to column 19)",
  " (in 'mvmr_horse', line 6, column 4 to column 19)",
  " (in 'mvmr_horse', line 7, column 11 to column 12)",
  " (in 'mvmr_horse', line 7, column 13 to column 16)",
  " (in 'mvmr_horse', line 7, column 4 to column 22)",
  " (in 'mvmr_horse', line 8, column 10 to column 11)",
  " (in 'mvmr_horse', line 8, column 20 to column 23)",
  " (in 'mvmr_horse', line 8, column 25 to column 28)",
  " (in 'mvmr_horse', line 8, column 4 to column 32)",
  " (in 'mvmr_horse', line 9, column 11 to column 12)",
  " (in 'mvmr_horse', line 9, column 14 to column 15)",
  " (in 'mvmr_horse', line 9, column 4 to column 19)",
  " (in 'mvmr_horse', line 10, column 4 to column 29)",
  " (in 'mvmr_horse', line 13, column 11 to column 12)",
  " (in 'mvmr_horse', line 13, column 14 to column 15)",
  " (in 'mvmr_horse', line 14, column 11 to column 12)",
  " (in 'mvmr_horse', line 15, column 11 to column 12)",
  " (in 'mvmr_horse', line 16, column 29 to column 30)",
  " (in 'mvmr_horse', line 17, column 20 to column 21)",
  " (in 'mvmr_horse', line 18, column 20 to column 21)",
  " (in 'mvmr_horse', line 21, column 11 to column 12)",
  " (in 'mvmr_horse', line 22, column 20 to column 21)",
  " (in 'mvmr_horse', line 25, column 11 to column 12)",
  " (in 'mvmr_horse', line 26, column 11 to column 12)",
  " (in 'mvmr_horse', line 27, column 11 to column 12)",
  " (in 'mvmr_horse', line 28, column 11 to column 12)",
  " (in 'mvmr_horse', line 28, column 14 to column 15)",
  " (in 'mvmr_horse', line 29, column 11 to column 12)",
  " (in 'mvmr_horse', line 29, column 14 to column 15)",
  " (in 'mvmr_horse', line 32, column 34 to column 35)",
  " (in 'mvmr_horse', line 32, column 11 to column 12)",
  " (in 'mvmr_horse', line 32, column 14 to column 15)",
  " (in 'mvmr_horse', line 33, column 11 to column 12)",
  " (in 'mvmr_horse', line 33, column 13 to column 16)"};
#include <stan_meta_header.hpp>
class model_mvmr_horse final : public model_base_crtp<model_mvmr_horse> {
private:
  int J;
  int K;
  Eigen::Matrix<double,-1,-1> obs_data__;
  std::vector<Eigen::Matrix<double,-1,-1>> V;
  Eigen::Matrix<double,-1,-1> R_data__;
  double fixed_tau;
  int mu_2dim__;
  Eigen::Map<Eigen::Matrix<double,-1,-1>> obs{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> R{nullptr, 0, 0};
public:
  ~model_mvmr_horse() {}
  model_mvmr_horse(stan::io::var_context& context__, unsigned int
                   random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_mvmr_horse_namespace::model_mvmr_horse";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 42;
      context__.validate_dims("data initialization", "J", "int",
        std::vector<size_t>{});
      J = std::numeric_limits<int>::min();
      current_statement__ = 42;
      J = context__.vals_i("J")[(1 - 1)];
      current_statement__ = 42;
      stan::math::check_greater_or_equal(function__, "J", J, 1);
      current_statement__ = 43;
      context__.validate_dims("data initialization", "K", "int",
        std::vector<size_t>{});
      K = std::numeric_limits<int>::min();
      current_statement__ = 43;
      K = context__.vals_i("K")[(1 - 1)];
      current_statement__ = 43;
      stan::math::check_greater_or_equal(function__, "K", K, 1);
      current_statement__ = 44;
      stan::math::validate_non_negative_index("obs", "J", J);
      current_statement__ = 45;
      stan::math::validate_non_negative_index("obs", "K + 1", (K + 1));
      current_statement__ = 46;
      context__.validate_dims("data initialization", "obs", "double",
        std::vector<size_t>{static_cast<size_t>(J),
          static_cast<size_t>((K + 1))});
      obs_data__ = Eigen::Matrix<double,-1,-1>::Constant(J, (K + 1),
                     std::numeric_limits<double>::quiet_NaN());
      new (&obs) Eigen::Map<Eigen::Matrix<double,-1,-1>>(obs_data__.data(),
        J, (K + 1));
      {
        std::vector<local_scalar_t__> obs_flat__;
        current_statement__ = 46;
        obs_flat__ = context__.vals_r("obs");
        current_statement__ = 46;
        pos__ = 1;
        current_statement__ = 46;
        for (int sym1__ = 1; sym1__ <= (K + 1); ++sym1__) {
          current_statement__ = 46;
          for (int sym2__ = 1; sym2__ <= J; ++sym2__) {
            current_statement__ = 46;
            stan::model::assign(obs, obs_flat__[(pos__ - 1)],
              "assigning variable obs", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 46;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 47;
      stan::math::validate_non_negative_index("V", "J", J);
      current_statement__ = 48;
      stan::math::validate_non_negative_index("V", "K + 1", (K + 1));
      current_statement__ = 49;
      stan::math::validate_non_negative_index("V", "K + 1", (K + 1));
      current_statement__ = 50;
      context__.validate_dims("data initialization", "V", "double",
        std::vector<size_t>{static_cast<size_t>(J),
          static_cast<size_t>((K + 1)), static_cast<size_t>((K + 1))});
      V = std::vector<Eigen::Matrix<double,-1,-1>>(J,
            Eigen::Matrix<double,-1,-1>::Constant((K + 1), (K + 1),
              std::numeric_limits<double>::quiet_NaN()));
      {
        std::vector<local_scalar_t__> V_flat__;
        current_statement__ = 50;
        V_flat__ = context__.vals_r("V");
        current_statement__ = 50;
        pos__ = 1;
        current_statement__ = 50;
        for (int sym1__ = 1; sym1__ <= (K + 1); ++sym1__) {
          current_statement__ = 50;
          for (int sym2__ = 1; sym2__ <= (K + 1); ++sym2__) {
            current_statement__ = 50;
            for (int sym3__ = 1; sym3__ <= J; ++sym3__) {
              current_statement__ = 50;
              stan::model::assign(V, V_flat__[(pos__ - 1)],
                "assigning variable V", stan::model::index_uni(sym3__),
                stan::model::index_uni(sym2__),
                stan::model::index_uni(sym1__));
              current_statement__ = 50;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 51;
      stan::math::validate_non_negative_index("R", "K", K);
      current_statement__ = 52;
      stan::math::validate_non_negative_index("R", "K", K);
      current_statement__ = 53;
      context__.validate_dims("data initialization", "R", "double",
        std::vector<size_t>{static_cast<size_t>(K), static_cast<size_t>(K)});
      R_data__ = Eigen::Matrix<double,-1,-1>::Constant(K, K,
                   std::numeric_limits<double>::quiet_NaN());
      new (&R) Eigen::Map<Eigen::Matrix<double,-1,-1>>(R_data__.data(), K, K);
      {
        std::vector<local_scalar_t__> R_flat__;
        current_statement__ = 53;
        R_flat__ = context__.vals_r("R");
        current_statement__ = 53;
        pos__ = 1;
        current_statement__ = 53;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 53;
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            current_statement__ = 53;
            stan::model::assign(R, R_flat__[(pos__ - 1)],
              "assigning variable R", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 53;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 54;
      context__.validate_dims("data initialization", "fixed_tau", "double",
        std::vector<size_t>{});
      fixed_tau = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 54;
      fixed_tau = context__.vals_r("fixed_tau")[(1 - 1)];
      current_statement__ = 54;
      stan::math::check_greater_or_equal(function__, "fixed_tau", fixed_tau,
        -1);
      current_statement__ = 55;
      stan::math::validate_non_negative_index("bx0", "J", J);
      current_statement__ = 56;
      stan::math::validate_non_negative_index("bx0", "K", K);
      current_statement__ = 57;
      stan::math::validate_non_negative_index("theta", "K", K);
      current_statement__ = 58;
      stan::math::validate_non_negative_index("alpha", "J", J);
      current_statement__ = 59;
      stan::math::validate_non_negative_index("r", "J", J);
      current_statement__ = 60;
      stan::math::validate_non_negative_index("a", "J", J);
      current_statement__ = 61;
      stan::math::validate_non_negative_index("b", "J", J);
      current_statement__ = 62;
      stan::math::validate_non_negative_index("mx", "K", K);
      current_statement__ = 63;
      stan::math::validate_non_negative_index("vx0", "K", K);
      current_statement__ = 64;
      stan::math::validate_non_negative_index("phi", "J", J);
      current_statement__ = 65;
      stan::math::validate_non_negative_index("rho", "J", J);
      current_statement__ = 66;
      stan::math::validate_non_negative_index("kappa", "J", J);
      current_statement__ = 67;
      stan::math::validate_non_negative_index("A", "K", K);
      current_statement__ = 68;
      stan::math::validate_non_negative_index("A", "K", K);
      current_statement__ = 69;
      stan::math::validate_non_negative_index("B", "K", K);
      current_statement__ = 70;
      stan::math::validate_non_negative_index("B", "K", K);
      current_statement__ = 71;
      stan::math::validate_non_negative_index("precision_matrix", "J", J);
      current_statement__ = 72;
      stan::math::validate_non_negative_index("precision_matrix", "K", K);
      current_statement__ = 73;
      stan::math::validate_non_negative_index("precision_matrix", "K", K);
      current_statement__ = 74;
      stan::math::validate_non_negative_index("mu", "J", J);
      current_statement__ = 75;
      mu_2dim__ = std::numeric_limits<int>::min();
      current_statement__ = 75;
      mu_2dim__ = (K + 1);
      current_statement__ = 75;
      stan::math::validate_non_negative_index("mu", "K + 1", mu_2dim__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = (J * K) + K + J + J + J + J + 1 + 1 + K + K;
  }
  inline std::string model_name() const final {
    return "model_mvmr_horse";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_mvmr_horse_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,-1> bx0 =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(J, K, DUMMY_VAR__);
      current_statement__ = 1;
      bx0 = in__.template read<Eigen::Matrix<local_scalar_t__,-1,-1>>(J, K);
      Eigen::Matrix<local_scalar_t__,-1,1> theta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 2;
      theta = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(K);
      Eigen::Matrix<local_scalar_t__,-1,1> alpha =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(J, DUMMY_VAR__);
      current_statement__ = 3;
      alpha = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(J);
      Eigen::Matrix<local_scalar_t__,-1,1> r =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(J, DUMMY_VAR__);
      current_statement__ = 4;
      r = in__.template read_constrain_lub<
            Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, 1, lp__, J);
      Eigen::Matrix<local_scalar_t__,-1,1> a =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(J, DUMMY_VAR__);
      current_statement__ = 5;
      a = in__.template read_constrain_lb<
            Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__, J);
      Eigen::Matrix<local_scalar_t__,-1,1> b =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(J, DUMMY_VAR__);
      current_statement__ = 6;
      b = in__.template read_constrain_lb<
            Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__, J);
      local_scalar_t__ c = DUMMY_VAR__;
      current_statement__ = 7;
      c = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
            lp__);
      local_scalar_t__ d = DUMMY_VAR__;
      current_statement__ = 8;
      d = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
            lp__);
      Eigen::Matrix<local_scalar_t__,-1,1> mx =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 9;
      mx = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(K);
      Eigen::Matrix<local_scalar_t__,-1,1> vx0 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 10;
      vx0 = in__.template read_constrain_lb<
              Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__, K);
      Eigen::Matrix<local_scalar_t__,-1,1> phi =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(J, DUMMY_VAR__);
      current_statement__ = 11;
      stan::model::assign(phi,
        stan::math::elt_divide(a, stan::math::sqrt(b)),
        "assigning variable phi");
      Eigen::Matrix<local_scalar_t__,-1,1> rho =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(J, DUMMY_VAR__);
      current_statement__ = 12;
      stan::model::assign(rho,
        stan::math::subtract(stan::math::multiply(2, r), 1),
        "assigning variable rho");
      Eigen::Matrix<local_scalar_t__,-1,1> kappa =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(J, DUMMY_VAR__);
      current_statement__ = 13;
      stan::model::assign(kappa,
        stan::math::elt_divide(stan::math::pow(rho, 2),
          stan::math::add(1, stan::math::multiply(K, stan::math::pow(rho, 2)))),
        "assigning variable kappa");
      Eigen::Matrix<local_scalar_t__,-1,-1> A =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(K, K, DUMMY_VAR__);
      current_statement__ = 14;
      stan::model::assign(A,
        stan::math::diag_matrix(stan::math::elt_divide(1.0, vx0)),
        "assigning variable A");
      Eigen::Matrix<local_scalar_t__,-1,-1> B =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(K, K, DUMMY_VAR__);
      current_statement__ = 15;
      stan::model::assign(B,
        stan::math::multiply(
          stan::math::elt_divide(1.0, stan::math::sqrt(vx0)),
          stan::math::transpose(
            stan::math::elt_divide(1.0, stan::math::sqrt(vx0)))),
        "assigning variable B");
      local_scalar_t__ tau = DUMMY_VAR__;
      current_statement__ = 16;
      tau = (c / stan::math::sqrt(d));
      current_statement__ = 20;
      if (stan::math::logical_neq(fixed_tau, -1)) {
        current_statement__ = 19;
        tau = fixed_tau;
      }
      std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>> precision_matrix =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>(J,
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(K, K, DUMMY_VAR__));
      Eigen::Matrix<local_scalar_t__,-1,-1> mu =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(J, mu_2dim__,
          DUMMY_VAR__);
      current_statement__ = 26;
      for (int i = 1; i <= J; ++i) {
        current_statement__ = 21;
        stan::model::assign(precision_matrix,
          stan::math::subtract(A,
            stan::math::multiply(
              stan::model::rvalue(kappa, "kappa", stan::model::index_uni(i)),
              B)), "assigning variable precision_matrix",
          stan::model::index_uni(i));
        current_statement__ = 23;
        for (int k = 1; k <= K; ++k) {
          current_statement__ = 22;
          stan::model::assign(mu,
            stan::model::rvalue(bx0, "bx0", stan::model::index_uni(i),
              stan::model::index_uni(k)), "assigning variable mu",
            stan::model::index_uni(i), stan::model::index_uni(k));
        }
        current_statement__ = 24;
        stan::model::assign(mu,
          (stan::math::dot_product(
             stan::model::rvalue(bx0, "bx0", stan::model::index_uni(i)),
             theta) +
          stan::model::rvalue(alpha, "alpha", stan::model::index_uni(i))),
          "assigning variable mu", stan::model::index_uni(i),
          stan::model::index_uni((K + 1)));
      }
      current_statement__ = 16;
      stan::math::check_greater_or_equal(function__, "tau", tau, 0);
      {
        current_statement__ = 34;
        for (int i = 1; i <= J; ++i) {
          current_statement__ = 27;
          lp_accum__.add(stan::math::multi_normal_lpdf<propto__>(
                           stan::model::rvalue(obs, "obs",
                             stan::model::index_uni(i)),
                           stan::model::rvalue(mu, "mu",
                             stan::model::index_uni(i)),
                           stan::model::rvalue(V, "V",
                             stan::model::index_uni(i))));
          current_statement__ = 28;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(
                           stan::model::rvalue(alpha, "alpha",
                             stan::model::index_uni(i)), 0, (tau *
                           stan::model::rvalue(phi, "phi",
                             stan::model::index_uni(i)))));
          current_statement__ = 29;
          lp_accum__.add(stan::math::multi_normal_lpdf<propto__>(
                           stan::model::rvalue(bx0, "bx0",
                             stan::model::index_uni(i)),
                           stan::math::add(mx,
                             stan::math::elt_multiply(stan::math::sqrt(vx0),
                               ((stan::model::rvalue(rho, "rho",
                                   stan::model::index_uni(i)) *
                               stan::model::rvalue(alpha, "alpha",
                                 stan::model::index_uni(i))) /
                               (stan::model::rvalue(phi, "phi",
                                  stan::model::index_uni(i)) * tau)))),
                           stan::math::inverse(
                             stan::model::rvalue(precision_matrix,
                               "precision_matrix", stan::model::index_uni(i)))));
          current_statement__ = 30;
          lp_accum__.add(stan::math::beta_lpdf<propto__>(
                           stan::model::rvalue(r, "r",
                             stan::model::index_uni(i)), 10, 10));
          current_statement__ = 31;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(
                           stan::model::rvalue(a, "a",
                             stan::model::index_uni(i)), 0, 1));
          current_statement__ = 32;
          lp_accum__.add(stan::math::gamma_lpdf<propto__>(
                           stan::model::rvalue(b, "b",
                             stan::model::index_uni(i)), 0.5, 0.5));
        }
        current_statement__ = 35;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(c, 0, 1));
        current_statement__ = 36;
        lp_accum__.add(stan::math::gamma_lpdf<propto__>(d, 0.5, 0.5));
        current_statement__ = 37;
        lp_accum__.add(stan::math::multi_normal_lpdf<propto__>(mx,
                         stan::math::rep_vector(0, K), R));
        current_statement__ = 41;
        for (int k = 1; k <= K; ++k) {
          current_statement__ = 38;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(
                           stan::model::rvalue(vx0, "vx0",
                             stan::model::index_uni(k)), 0, 1));
          current_statement__ = 39;
          lp_accum__.add(stan::math::uniform_lpdf<propto__>(
                           stan::model::rvalue(theta, "theta",
                             stan::model::index_uni(k)), -10, 10));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_mvmr_horse_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<double,-1,-1> bx0 =
        Eigen::Matrix<double,-1,-1>::Constant(J, K,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      bx0 = in__.template read<Eigen::Matrix<local_scalar_t__,-1,-1>>(J, K);
      Eigen::Matrix<double,-1,1> theta =
        Eigen::Matrix<double,-1,1>::Constant(K,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      theta = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(K);
      Eigen::Matrix<double,-1,1> alpha =
        Eigen::Matrix<double,-1,1>::Constant(J,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      alpha = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(J);
      Eigen::Matrix<double,-1,1> r =
        Eigen::Matrix<double,-1,1>::Constant(J,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      r = in__.template read_constrain_lub<
            Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, 1, lp__, J);
      Eigen::Matrix<double,-1,1> a =
        Eigen::Matrix<double,-1,1>::Constant(J,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 5;
      a = in__.template read_constrain_lb<
            Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__, J);
      Eigen::Matrix<double,-1,1> b =
        Eigen::Matrix<double,-1,1>::Constant(J,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 6;
      b = in__.template read_constrain_lb<
            Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__, J);
      double c = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 7;
      c = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
            lp__);
      double d = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 8;
      d = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
            lp__);
      Eigen::Matrix<double,-1,1> mx =
        Eigen::Matrix<double,-1,1>::Constant(K,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 9;
      mx = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(K);
      Eigen::Matrix<double,-1,1> vx0 =
        Eigen::Matrix<double,-1,1>::Constant(K,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 10;
      vx0 = in__.template read_constrain_lb<
              Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__, K);
      Eigen::Matrix<double,-1,1> phi =
        Eigen::Matrix<double,-1,1>::Constant(J,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> rho =
        Eigen::Matrix<double,-1,1>::Constant(J,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> kappa =
        Eigen::Matrix<double,-1,1>::Constant(J,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> A =
        Eigen::Matrix<double,-1,-1>::Constant(K, K,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> B =
        Eigen::Matrix<double,-1,-1>::Constant(K, K,
          std::numeric_limits<double>::quiet_NaN());
      double tau = std::numeric_limits<double>::quiet_NaN();
      std::vector<Eigen::Matrix<double,-1,-1>> precision_matrix =
        std::vector<Eigen::Matrix<double,-1,-1>>(J,
          Eigen::Matrix<double,-1,-1>::Constant(K, K,
            std::numeric_limits<double>::quiet_NaN()));
      Eigen::Matrix<double,-1,-1> mu =
        Eigen::Matrix<double,-1,-1>::Constant(J, mu_2dim__,
          std::numeric_limits<double>::quiet_NaN());
      out__.write(bx0);
      out__.write(theta);
      out__.write(alpha);
      out__.write(r);
      out__.write(a);
      out__.write(b);
      out__.write(c);
      out__.write(d);
      out__.write(mx);
      out__.write(vx0);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 11;
      stan::model::assign(phi,
        stan::math::elt_divide(a, stan::math::sqrt(b)),
        "assigning variable phi");
      current_statement__ = 12;
      stan::model::assign(rho,
        stan::math::subtract(stan::math::multiply(2, r), 1),
        "assigning variable rho");
      current_statement__ = 13;
      stan::model::assign(kappa,
        stan::math::elt_divide(stan::math::pow(rho, 2),
          stan::math::add(1, stan::math::multiply(K, stan::math::pow(rho, 2)))),
        "assigning variable kappa");
      current_statement__ = 14;
      stan::model::assign(A,
        stan::math::diag_matrix(stan::math::elt_divide(1.0, vx0)),
        "assigning variable A");
      current_statement__ = 15;
      stan::model::assign(B,
        stan::math::multiply(
          stan::math::elt_divide(1.0, stan::math::sqrt(vx0)),
          stan::math::transpose(
            stan::math::elt_divide(1.0, stan::math::sqrt(vx0)))),
        "assigning variable B");
      current_statement__ = 16;
      tau = (c / stan::math::sqrt(d));
      current_statement__ = 20;
      if (stan::math::logical_neq(fixed_tau, -1)) {
        current_statement__ = 19;
        tau = fixed_tau;
      }
      current_statement__ = 26;
      for (int i = 1; i <= J; ++i) {
        current_statement__ = 21;
        stan::model::assign(precision_matrix,
          stan::math::subtract(A,
            stan::math::multiply(
              stan::model::rvalue(kappa, "kappa", stan::model::index_uni(i)),
              B)), "assigning variable precision_matrix",
          stan::model::index_uni(i));
        current_statement__ = 23;
        for (int k = 1; k <= K; ++k) {
          current_statement__ = 22;
          stan::model::assign(mu,
            stan::model::rvalue(bx0, "bx0", stan::model::index_uni(i),
              stan::model::index_uni(k)), "assigning variable mu",
            stan::model::index_uni(i), stan::model::index_uni(k));
        }
        current_statement__ = 24;
        stan::model::assign(mu,
          (stan::math::dot_product(
             stan::model::rvalue(bx0, "bx0", stan::model::index_uni(i)),
             theta) +
          stan::model::rvalue(alpha, "alpha", stan::model::index_uni(i))),
          "assigning variable mu", stan::model::index_uni(i),
          stan::model::index_uni((K + 1)));
      }
      current_statement__ = 16;
      stan::math::check_greater_or_equal(function__, "tau", tau, 0);
      if (emit_transformed_parameters__) {
        out__.write(phi);
        out__.write(rho);
        out__.write(kappa);
        out__.write(A);
        out__.write(B);
        out__.write(tau);
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            for (int sym3__ = 1; sym3__ <= J; ++sym3__) {
              out__.write(stan::model::rvalue(precision_matrix,
                            "precision_matrix",
                            stan::model::index_uni(sym3__),
                            stan::model::index_uni(sym2__),
                            stan::model::index_uni(sym1__)));
            }
          }
        }
        out__.write(mu);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,-1> bx0 =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(J, K, DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(bx0,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,-1>>(J, K),
        "assigning variable bx0");
      out__.write(bx0);
      Eigen::Matrix<local_scalar_t__,-1,1> theta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(theta,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(K),
        "assigning variable theta");
      out__.write(theta);
      Eigen::Matrix<local_scalar_t__,-1,1> alpha =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(J, DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(alpha,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(J),
        "assigning variable alpha");
      out__.write(alpha);
      Eigen::Matrix<local_scalar_t__,-1,1> r =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(J, DUMMY_VAR__);
      current_statement__ = 4;
      stan::model::assign(r,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(J),
        "assigning variable r");
      out__.write_free_lub(0, 1, r);
      Eigen::Matrix<local_scalar_t__,-1,1> a =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(J, DUMMY_VAR__);
      current_statement__ = 5;
      stan::model::assign(a,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(J),
        "assigning variable a");
      out__.write_free_lb(0, a);
      Eigen::Matrix<local_scalar_t__,-1,1> b =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(J, DUMMY_VAR__);
      current_statement__ = 6;
      stan::model::assign(b,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(J),
        "assigning variable b");
      out__.write_free_lb(0, b);
      local_scalar_t__ c = DUMMY_VAR__;
      current_statement__ = 7;
      c = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, c);
      local_scalar_t__ d = DUMMY_VAR__;
      current_statement__ = 8;
      d = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, d);
      Eigen::Matrix<local_scalar_t__,-1,1> mx =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 9;
      stan::model::assign(mx,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(K),
        "assigning variable mx");
      out__.write(mx);
      Eigen::Matrix<local_scalar_t__,-1,1> vx0 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 10;
      stan::model::assign(vx0,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(K),
        "assigning variable vx0");
      out__.write_free_lb(0, vx0);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "bx0", "double",
        std::vector<size_t>{static_cast<size_t>(J), static_cast<size_t>(K)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "theta", "double",
        std::vector<size_t>{static_cast<size_t>(K)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "alpha", "double",
        std::vector<size_t>{static_cast<size_t>(J)});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "r", "double",
        std::vector<size_t>{static_cast<size_t>(J)});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "a", "double",
        std::vector<size_t>{static_cast<size_t>(J)});
      current_statement__ = 6;
      context__.validate_dims("parameter initialization", "b", "double",
        std::vector<size_t>{static_cast<size_t>(J)});
      current_statement__ = 7;
      context__.validate_dims("parameter initialization", "c", "double",
        std::vector<size_t>{});
      current_statement__ = 8;
      context__.validate_dims("parameter initialization", "d", "double",
        std::vector<size_t>{});
      current_statement__ = 9;
      context__.validate_dims("parameter initialization", "mx", "double",
        std::vector<size_t>{static_cast<size_t>(K)});
      current_statement__ = 10;
      context__.validate_dims("parameter initialization", "vx0", "double",
        std::vector<size_t>{static_cast<size_t>(K)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,-1> bx0 =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(J, K, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> bx0_flat__;
        current_statement__ = 1;
        bx0_flat__ = context__.vals_r("bx0");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 1;
          for (int sym2__ = 1; sym2__ <= J; ++sym2__) {
            current_statement__ = 1;
            stan::model::assign(bx0, bx0_flat__[(pos__ - 1)],
              "assigning variable bx0", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 1;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write(bx0);
      Eigen::Matrix<local_scalar_t__,-1,1> theta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> theta_flat__;
        current_statement__ = 2;
        theta_flat__ = context__.vals_r("theta");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 2;
          stan::model::assign(theta, theta_flat__[(pos__ - 1)],
            "assigning variable theta", stan::model::index_uni(sym1__));
          current_statement__ = 2;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(theta);
      Eigen::Matrix<local_scalar_t__,-1,1> alpha =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(J, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> alpha_flat__;
        current_statement__ = 3;
        alpha_flat__ = context__.vals_r("alpha");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
          current_statement__ = 3;
          stan::model::assign(alpha, alpha_flat__[(pos__ - 1)],
            "assigning variable alpha", stan::model::index_uni(sym1__));
          current_statement__ = 3;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(alpha);
      Eigen::Matrix<local_scalar_t__,-1,1> r =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(J, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> r_flat__;
        current_statement__ = 4;
        r_flat__ = context__.vals_r("r");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
          current_statement__ = 4;
          stan::model::assign(r, r_flat__[(pos__ - 1)],
            "assigning variable r", stan::model::index_uni(sym1__));
          current_statement__ = 4;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lub(0, 1, r);
      Eigen::Matrix<local_scalar_t__,-1,1> a =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(J, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> a_flat__;
        current_statement__ = 5;
        a_flat__ = context__.vals_r("a");
        current_statement__ = 5;
        pos__ = 1;
        current_statement__ = 5;
        for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
          current_statement__ = 5;
          stan::model::assign(a, a_flat__[(pos__ - 1)],
            "assigning variable a", stan::model::index_uni(sym1__));
          current_statement__ = 5;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(0, a);
      Eigen::Matrix<local_scalar_t__,-1,1> b =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(J, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> b_flat__;
        current_statement__ = 6;
        b_flat__ = context__.vals_r("b");
        current_statement__ = 6;
        pos__ = 1;
        current_statement__ = 6;
        for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
          current_statement__ = 6;
          stan::model::assign(b, b_flat__[(pos__ - 1)],
            "assigning variable b", stan::model::index_uni(sym1__));
          current_statement__ = 6;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(0, b);
      local_scalar_t__ c = DUMMY_VAR__;
      current_statement__ = 7;
      c = context__.vals_r("c")[(1 - 1)];
      out__.write_free_lb(0, c);
      local_scalar_t__ d = DUMMY_VAR__;
      current_statement__ = 8;
      d = context__.vals_r("d")[(1 - 1)];
      out__.write_free_lb(0, d);
      Eigen::Matrix<local_scalar_t__,-1,1> mx =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> mx_flat__;
        current_statement__ = 9;
        mx_flat__ = context__.vals_r("mx");
        current_statement__ = 9;
        pos__ = 1;
        current_statement__ = 9;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 9;
          stan::model::assign(mx, mx_flat__[(pos__ - 1)],
            "assigning variable mx", stan::model::index_uni(sym1__));
          current_statement__ = 9;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(mx);
      Eigen::Matrix<local_scalar_t__,-1,1> vx0 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> vx0_flat__;
        current_statement__ = 10;
        vx0_flat__ = context__.vals_r("vx0");
        current_statement__ = 10;
        pos__ = 1;
        current_statement__ = 10;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 10;
          stan::model::assign(vx0, vx0_flat__[(pos__ - 1)],
            "assigning variable vx0", stan::model::index_uni(sym1__));
          current_statement__ = 10;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(0, vx0);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"bx0", "theta", "alpha", "r", "a",
                "b", "c", "d", "mx", "vx0"};
    if (emit_transformed_parameters__) {
      std::vector<std::string>
        temp{"phi", "rho", "kappa", "A", "B", "tau", "precision_matrix", "mu"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(J),
                                                 static_cast<size_t>(K)},
                std::vector<size_t>{static_cast<size_t>(K)},
                std::vector<size_t>{static_cast<size_t>(J)},
                std::vector<size_t>{static_cast<size_t>(J)},
                std::vector<size_t>{static_cast<size_t>(J)},
                std::vector<size_t>{static_cast<size_t>(J)},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(K)},
                std::vector<size_t>{static_cast<size_t>(K)}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(J)},
             std::vector<size_t>{static_cast<size_t>(J)},
             std::vector<size_t>{static_cast<size_t>(J)},
             std::vector<size_t>{static_cast<size_t>(K),
               static_cast<size_t>(K)},
             std::vector<size_t>{static_cast<size_t>(K),
               static_cast<size_t>(K)}, std::vector<size_t>{},
             std::vector<size_t>{static_cast<size_t>(J),
               static_cast<size_t>(K), static_cast<size_t>(K)},
             std::vector<size_t>{static_cast<size_t>(J),
               static_cast<size_t>(mu_2dim__)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= J; ++sym2__) {
        param_names__.emplace_back(std::string() + "bx0" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      param_names__.emplace_back(std::string() + "theta" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
      param_names__.emplace_back(std::string() + "alpha" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
      param_names__.emplace_back(std::string() + "r" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
      param_names__.emplace_back(std::string() + "a" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
      param_names__.emplace_back(std::string() + "b" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "c");
    param_names__.emplace_back(std::string() + "d");
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      param_names__.emplace_back(std::string() + "mx" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      param_names__.emplace_back(std::string() + "vx0" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        param_names__.emplace_back(std::string() + "phi" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        param_names__.emplace_back(std::string() + "rho" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        param_names__.emplace_back(std::string() + "kappa" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          param_names__.emplace_back(std::string() + "A" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          param_names__.emplace_back(std::string() + "B" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      param_names__.emplace_back(std::string() + "tau");
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= J; ++sym3__) {
            param_names__.emplace_back(std::string() + "precision_matrix" +
              '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) +
              '.' + std::to_string(sym1__));
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= mu_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= J; ++sym2__) {
          param_names__.emplace_back(std::string() + "mu" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= J; ++sym2__) {
        param_names__.emplace_back(std::string() + "bx0" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      param_names__.emplace_back(std::string() + "theta" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
      param_names__.emplace_back(std::string() + "alpha" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
      param_names__.emplace_back(std::string() + "r" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
      param_names__.emplace_back(std::string() + "a" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
      param_names__.emplace_back(std::string() + "b" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "c");
    param_names__.emplace_back(std::string() + "d");
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      param_names__.emplace_back(std::string() + "mx" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      param_names__.emplace_back(std::string() + "vx0" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        param_names__.emplace_back(std::string() + "phi" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        param_names__.emplace_back(std::string() + "rho" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        param_names__.emplace_back(std::string() + "kappa" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          param_names__.emplace_back(std::string() + "A" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          param_names__.emplace_back(std::string() + "B" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      param_names__.emplace_back(std::string() + "tau");
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= J; ++sym3__) {
            param_names__.emplace_back(std::string() + "precision_matrix" +
              '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) +
              '.' + std::to_string(sym1__));
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= mu_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= J; ++sym2__) {
          param_names__.emplace_back(std::string() + "mu" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
    }
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"bx0\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(J) + ",\"cols\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"theta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(J) + "},\"block\":\"parameters\"},{\"name\":\"r\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(J) + "},\"block\":\"parameters\"},{\"name\":\"a\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(J) + "},\"block\":\"parameters\"},{\"name\":\"b\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(J) + "},\"block\":\"parameters\"},{\"name\":\"c\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"d\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mx\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"vx0\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(J) + "},\"block\":\"transformed_parameters\"},{\"name\":\"rho\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(J) + "},\"block\":\"transformed_parameters\"},{\"name\":\"kappa\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(J) + "},\"block\":\"transformed_parameters\"},{\"name\":\"A\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(K) + ",\"cols\":" + std::to_string(K) + "},\"block\":\"transformed_parameters\"},{\"name\":\"B\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(K) + ",\"cols\":" + std::to_string(K) + "},\"block\":\"transformed_parameters\"},{\"name\":\"tau\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"precision_matrix\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(J) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(K) + ",\"cols\":" + std::to_string(K) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(J) + ",\"cols\":" + std::to_string(mu_2dim__) + "},\"block\":\"transformed_parameters\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"bx0\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(J) + ",\"cols\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"theta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(J) + "},\"block\":\"parameters\"},{\"name\":\"r\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(J) + "},\"block\":\"parameters\"},{\"name\":\"a\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(J) + "},\"block\":\"parameters\"},{\"name\":\"b\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(J) + "},\"block\":\"parameters\"},{\"name\":\"c\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"d\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mx\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"vx0\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(J) + "},\"block\":\"transformed_parameters\"},{\"name\":\"rho\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(J) + "},\"block\":\"transformed_parameters\"},{\"name\":\"kappa\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(J) + "},\"block\":\"transformed_parameters\"},{\"name\":\"A\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(K) + ",\"cols\":" + std::to_string(K) + "},\"block\":\"transformed_parameters\"},{\"name\":\"B\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(K) + ",\"cols\":" + std::to_string(K) + "},\"block\":\"transformed_parameters\"},{\"name\":\"tau\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"precision_matrix\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(J) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(K) + ",\"cols\":" + std::to_string(K) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(J) + ",\"cols\":" + std::to_string(mu_2dim__) + "},\"block\":\"transformed_parameters\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((((((((J * K) + K) + J) + J) + J) + J) +
      1) + 1) + K) + K);
    const size_t num_transformed = emit_transformed_parameters * ((((((((J +
      J) + J) + (K * K)) + (K * K)) + 1) + ((J * K) * K)) + (J * mu_2dim__)));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((((((((J * K) + K) + J) + J) + J) + J) +
      1) + 1) + K) + K);
    const size_t num_transformed = emit_transformed_parameters * ((((((((J +
      J) + J) + (K * K)) + (K * K)) + 1) + ((J * K) * K)) + (J * mu_2dim__)));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_mvmr_horse_namespace::model_mvmr_horse;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_mvmr_horse_namespace::profiles__;
}
#endif
#endif
