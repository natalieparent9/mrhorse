// Generated by rstantools.  Do not edit by hand.

/*
    mrhorse is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    mrhorse is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with mrhorse.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_mr_horse_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 50> locations_array__ =
  {" (found before start of program)",
  " (in 'mr_horse', line 10, column 2 to column 13)",
  " (in 'mr_horse', line 11, column 2 to column 18)",
  " (in 'mr_horse', line 12, column 2 to column 16)",
  " (in 'mr_horse', line 13, column 2 to column 23)",
  " (in 'mr_horse', line 14, column 2 to column 23)",
  " (in 'mr_horse', line 15, column 2 to column 32)",
  " (in 'mr_horse', line 16, column 2 to column 18)",
  " (in 'mr_horse', line 17, column 2 to column 18)",
  " (in 'mr_horse', line 18, column 2 to column 20)",
  " (in 'mr_horse', line 19, column 2 to column 11)",
  " (in 'mr_horse', line 22, column 2 to column 40)",
  " (in 'mr_horse', line 23, column 2 to column 28)",
  " (in 'mr_horse', line 24, column 2 to column 37)",
  " (in 'mr_horse', line 25, column 2 to column 20)",
  " (in 'mr_horse', line 29, column 4 to column 20)",
  " (in 'mr_horse', line 28, column 9 to line 30, column 3)",
  " (in 'mr_horse', line 27, column 4 to column 22)",
  " (in 'mr_horse', line 26, column 23 to line 28, column 3)",
  " (in 'mr_horse', line 26, column 2 to line 30, column 3)",
  " (in 'mr_horse', line 34, column 2 to column 27)",
  " (in 'mr_horse', line 35, column 2 to column 31)",
  " (in 'mr_horse', line 36, column 2 to column 94)",
  " (in 'mr_horse', line 37, column 2 to column 19)",
  " (in 'mr_horse', line 38, column 2 to column 22)",
  " (in 'mr_horse', line 39, column 2 to column 19)",
  " (in 'mr_horse', line 40, column 2 to column 19)",
  " (in 'mr_horse', line 41, column 2 to column 22)",
  " (in 'mr_horse', line 42, column 2 to column 21)",
  " (in 'mr_horse', line 43, column 2 to column 21)",
  " (in 'mr_horse', line 45, column 2 to column 22)",
  " (in 'mr_horse', line 46, column 2 to column 23)",
  " (in 'mr_horse', line 2, column 2 to column 17)",
  " (in 'mr_horse', line 3, column 9 to column 10)",
  " (in 'mr_horse', line 3, column 2 to column 15)",
  " (in 'mr_horse', line 4, column 9 to column 10)",
  " (in 'mr_horse', line 4, column 2 to column 15)",
  " (in 'mr_horse', line 5, column 9 to column 10)",
  " (in 'mr_horse', line 5, column 2 to column 15)",
  " (in 'mr_horse', line 6, column 9 to column 10)",
  " (in 'mr_horse', line 6, column 2 to column 15)",
  " (in 'mr_horse', line 7, column 2 to column 27)",
  " (in 'mr_horse', line 11, column 9 to column 10)",
  " (in 'mr_horse', line 12, column 9 to column 10)",
  " (in 'mr_horse', line 13, column 18 to column 19)",
  " (in 'mr_horse', line 14, column 18 to column 19)",
  " (in 'mr_horse', line 15, column 27 to column 28)",
  " (in 'mr_horse', line 22, column 18 to column 19)",
  " (in 'mr_horse', line 23, column 9 to column 10)",
  " (in 'mr_horse', line 24, column 9 to column 10)"};
#include <stan_meta_header.hpp>
class model_mr_horse final : public model_base_crtp<model_mr_horse> {
private:
  int N;
  Eigen::Matrix<double,-1,1> by_data__;
  Eigen::Matrix<double,-1,1> bx_data__;
  Eigen::Matrix<double,-1,1> sy_data__;
  Eigen::Matrix<double,-1,1> sx_data__;
  double fixed_tau;
  Eigen::Map<Eigen::Matrix<double,-1,1>> by{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> bx{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> sy{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> sx{nullptr, 0};
public:
  ~model_mr_horse() {}
  model_mr_horse(stan::io::var_context& context__, unsigned int
                 random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_mr_horse_namespace::model_mr_horse";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 32;
      context__.validate_dims("data initialization", "N", "int",
        std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      current_statement__ = 32;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 32;
      stan::math::check_greater_or_equal(function__, "N", N, 0);
      current_statement__ = 33;
      stan::math::validate_non_negative_index("by", "N", N);
      current_statement__ = 34;
      context__.validate_dims("data initialization", "by", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      by_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                    std::numeric_limits<double>::quiet_NaN());
      new (&by) Eigen::Map<Eigen::Matrix<double,-1,1>>(by_data__.data(), N);
      {
        std::vector<local_scalar_t__> by_flat__;
        current_statement__ = 34;
        by_flat__ = context__.vals_r("by");
        current_statement__ = 34;
        pos__ = 1;
        current_statement__ = 34;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 34;
          stan::model::assign(by, by_flat__[(pos__ - 1)],
            "assigning variable by", stan::model::index_uni(sym1__));
          current_statement__ = 34;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 35;
      stan::math::validate_non_negative_index("bx", "N", N);
      current_statement__ = 36;
      context__.validate_dims("data initialization", "bx", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      bx_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                    std::numeric_limits<double>::quiet_NaN());
      new (&bx) Eigen::Map<Eigen::Matrix<double,-1,1>>(bx_data__.data(), N);
      {
        std::vector<local_scalar_t__> bx_flat__;
        current_statement__ = 36;
        bx_flat__ = context__.vals_r("bx");
        current_statement__ = 36;
        pos__ = 1;
        current_statement__ = 36;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 36;
          stan::model::assign(bx, bx_flat__[(pos__ - 1)],
            "assigning variable bx", stan::model::index_uni(sym1__));
          current_statement__ = 36;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 37;
      stan::math::validate_non_negative_index("sy", "N", N);
      current_statement__ = 38;
      context__.validate_dims("data initialization", "sy", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      sy_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                    std::numeric_limits<double>::quiet_NaN());
      new (&sy) Eigen::Map<Eigen::Matrix<double,-1,1>>(sy_data__.data(), N);
      {
        std::vector<local_scalar_t__> sy_flat__;
        current_statement__ = 38;
        sy_flat__ = context__.vals_r("sy");
        current_statement__ = 38;
        pos__ = 1;
        current_statement__ = 38;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 38;
          stan::model::assign(sy, sy_flat__[(pos__ - 1)],
            "assigning variable sy", stan::model::index_uni(sym1__));
          current_statement__ = 38;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 39;
      stan::math::validate_non_negative_index("sx", "N", N);
      current_statement__ = 40;
      context__.validate_dims("data initialization", "sx", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      sx_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                    std::numeric_limits<double>::quiet_NaN());
      new (&sx) Eigen::Map<Eigen::Matrix<double,-1,1>>(sx_data__.data(), N);
      {
        std::vector<local_scalar_t__> sx_flat__;
        current_statement__ = 40;
        sx_flat__ = context__.vals_r("sx");
        current_statement__ = 40;
        pos__ = 1;
        current_statement__ = 40;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 40;
          stan::model::assign(sx, sx_flat__[(pos__ - 1)],
            "assigning variable sx", stan::model::index_uni(sym1__));
          current_statement__ = 40;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 41;
      context__.validate_dims("data initialization", "fixed_tau", "double",
        std::vector<size_t>{});
      fixed_tau = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 41;
      fixed_tau = context__.vals_r("fixed_tau")[(1 - 1)];
      current_statement__ = 41;
      stan::math::check_greater_or_equal(function__, "fixed_tau", fixed_tau,
        -1);
      current_statement__ = 42;
      stan::math::validate_non_negative_index("alpha", "N", N);
      current_statement__ = 43;
      stan::math::validate_non_negative_index("bx0", "N", N);
      current_statement__ = 44;
      stan::math::validate_non_negative_index("a", "N", N);
      current_statement__ = 45;
      stan::math::validate_non_negative_index("b", "N", N);
      current_statement__ = 46;
      stan::math::validate_non_negative_index("r", "N", N);
      current_statement__ = 47;
      stan::math::validate_non_negative_index("phi", "N", N);
      current_statement__ = 48;
      stan::math::validate_non_negative_index("rho", "N", N);
      current_statement__ = 49;
      stan::math::validate_non_negative_index("mu", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + N + N + N + N + N + 1 + 1 + 1 + 1;
  }
  inline std::string model_name() const final {
    return "model_mr_horse";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_mr_horse_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      local_scalar_t__ theta = DUMMY_VAR__;
      current_statement__ = 1;
      theta = in__.template read<local_scalar_t__>();
      Eigen::Matrix<local_scalar_t__,-1,1> alpha =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 2;
      alpha = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(N);
      Eigen::Matrix<local_scalar_t__,-1,1> bx0 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 3;
      bx0 = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(N);
      Eigen::Matrix<local_scalar_t__,-1,1> a =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 4;
      a = in__.template read_constrain_lb<
            Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__, N);
      Eigen::Matrix<local_scalar_t__,-1,1> b =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 5;
      b = in__.template read_constrain_lb<
            Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__, N);
      Eigen::Matrix<local_scalar_t__,-1,1> r =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 6;
      r = in__.template read_constrain_lub<
            Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, 1, lp__, N);
      local_scalar_t__ c = DUMMY_VAR__;
      current_statement__ = 7;
      c = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
            lp__);
      local_scalar_t__ d = DUMMY_VAR__;
      current_statement__ = 8;
      d = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
            lp__);
      local_scalar_t__ vx0 = DUMMY_VAR__;
      current_statement__ = 9;
      vx0 = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
              lp__);
      local_scalar_t__ mx0 = DUMMY_VAR__;
      current_statement__ = 10;
      mx0 = in__.template read<local_scalar_t__>();
      Eigen::Matrix<local_scalar_t__,-1,1> phi =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 11;
      stan::model::assign(phi,
        stan::math::elt_divide(a, stan::math::sqrt(b)),
        "assigning variable phi");
      Eigen::Matrix<local_scalar_t__,-1,1> rho =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 12;
      stan::model::assign(rho,
        stan::math::subtract(stan::math::multiply(2, r), 1),
        "assigning variable rho");
      Eigen::Matrix<local_scalar_t__,-1,1> mu =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 13;
      stan::model::assign(mu,
        stan::math::add(stan::math::multiply(theta, bx0), alpha),
        "assigning variable mu");
      local_scalar_t__ tau = DUMMY_VAR__;
      current_statement__ = 19;
      if (stan::math::logical_eq(fixed_tau, -1)) {
        current_statement__ = 17;
        tau = (c / stan::math::sqrt(d));
      } else {
        current_statement__ = 15;
        tau = fixed_tau;
      }
      current_statement__ = 11;
      stan::math::check_greater_or_equal(function__, "phi", phi, 0);
      current_statement__ = 14;
      stan::math::check_greater_or_equal(function__, "tau", tau, 0);
      {
        current_statement__ = 20;
        lp_accum__.add(stan::math::uniform_lpdf<propto__>(theta, -10, 10));
        current_statement__ = 21;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(alpha, 0,
                         stan::math::multiply(tau, phi)));
        current_statement__ = 22;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(bx0,
                         stan::math::add(mx0,
                           stan::math::elt_multiply(
                             stan::math::elt_multiply(
                               stan::math::divide(stan::math::sqrt(vx0),
                                 stan::math::multiply(tau, phi)), rho), alpha)),
                         stan::math::sqrt(
                           stan::math::multiply(
                             stan::math::subtract(1,
                               stan::math::elt_multiply(rho, rho)), vx0))));
        current_statement__ = 23;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(a, 0, 1));
        current_statement__ = 24;
        lp_accum__.add(stan::math::gamma_lpdf<propto__>(b, 0.5, 0.5));
        current_statement__ = 25;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(r, 10, 10));
        current_statement__ = 26;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(c, 0, 1));
        current_statement__ = 27;
        lp_accum__.add(stan::math::gamma_lpdf<propto__>(d, 0.5, 0.5));
        current_statement__ = 28;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(vx0, 0, 1));
        current_statement__ = 29;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(mx0, 0, 1));
        current_statement__ = 30;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(by, mu, sy));
        current_statement__ = 31;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(bx, bx0, sx));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_mr_horse_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      double theta = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      theta = in__.template read<local_scalar_t__>();
      Eigen::Matrix<double,-1,1> alpha =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      alpha = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(N);
      Eigen::Matrix<double,-1,1> bx0 =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      bx0 = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(N);
      Eigen::Matrix<double,-1,1> a =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      a = in__.template read_constrain_lb<
            Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__, N);
      Eigen::Matrix<double,-1,1> b =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 5;
      b = in__.template read_constrain_lb<
            Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__, N);
      Eigen::Matrix<double,-1,1> r =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 6;
      r = in__.template read_constrain_lub<
            Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, 1, lp__, N);
      double c = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 7;
      c = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
            lp__);
      double d = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 8;
      d = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
            lp__);
      double vx0 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 9;
      vx0 = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
              lp__);
      double mx0 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 10;
      mx0 = in__.template read<local_scalar_t__>();
      Eigen::Matrix<double,-1,1> phi =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> rho =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> mu =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      double tau = std::numeric_limits<double>::quiet_NaN();
      out__.write(theta);
      out__.write(alpha);
      out__.write(bx0);
      out__.write(a);
      out__.write(b);
      out__.write(r);
      out__.write(c);
      out__.write(d);
      out__.write(vx0);
      out__.write(mx0);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 11;
      stan::model::assign(phi,
        stan::math::elt_divide(a, stan::math::sqrt(b)),
        "assigning variable phi");
      current_statement__ = 12;
      stan::model::assign(rho,
        stan::math::subtract(stan::math::multiply(2, r), 1),
        "assigning variable rho");
      current_statement__ = 13;
      stan::model::assign(mu,
        stan::math::add(stan::math::multiply(theta, bx0), alpha),
        "assigning variable mu");
      current_statement__ = 19;
      if (stan::math::logical_eq(fixed_tau, -1)) {
        current_statement__ = 17;
        tau = (c / stan::math::sqrt(d));
      } else {
        current_statement__ = 15;
        tau = fixed_tau;
      }
      current_statement__ = 11;
      stan::math::check_greater_or_equal(function__, "phi", phi, 0);
      current_statement__ = 14;
      stan::math::check_greater_or_equal(function__, "tau", tau, 0);
      if (emit_transformed_parameters__) {
        out__.write(phi);
        out__.write(rho);
        out__.write(mu);
        out__.write(tau);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ theta = DUMMY_VAR__;
      current_statement__ = 1;
      theta = in__.read<local_scalar_t__>();
      out__.write(theta);
      Eigen::Matrix<local_scalar_t__,-1,1> alpha =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(alpha,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(N),
        "assigning variable alpha");
      out__.write(alpha);
      Eigen::Matrix<local_scalar_t__,-1,1> bx0 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(bx0,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(N),
        "assigning variable bx0");
      out__.write(bx0);
      Eigen::Matrix<local_scalar_t__,-1,1> a =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 4;
      stan::model::assign(a,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(N),
        "assigning variable a");
      out__.write_free_lb(0, a);
      Eigen::Matrix<local_scalar_t__,-1,1> b =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 5;
      stan::model::assign(b,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(N),
        "assigning variable b");
      out__.write_free_lb(0, b);
      Eigen::Matrix<local_scalar_t__,-1,1> r =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 6;
      stan::model::assign(r,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(N),
        "assigning variable r");
      out__.write_free_lub(0, 1, r);
      local_scalar_t__ c = DUMMY_VAR__;
      current_statement__ = 7;
      c = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, c);
      local_scalar_t__ d = DUMMY_VAR__;
      current_statement__ = 8;
      d = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, d);
      local_scalar_t__ vx0 = DUMMY_VAR__;
      current_statement__ = 9;
      vx0 = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, vx0);
      local_scalar_t__ mx0 = DUMMY_VAR__;
      current_statement__ = 10;
      mx0 = in__.read<local_scalar_t__>();
      out__.write(mx0);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "theta", "double",
        std::vector<size_t>{});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "alpha", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "bx0", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "a", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "b", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      current_statement__ = 6;
      context__.validate_dims("parameter initialization", "r", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      current_statement__ = 7;
      context__.validate_dims("parameter initialization", "c", "double",
        std::vector<size_t>{});
      current_statement__ = 8;
      context__.validate_dims("parameter initialization", "d", "double",
        std::vector<size_t>{});
      current_statement__ = 9;
      context__.validate_dims("parameter initialization", "vx0", "double",
        std::vector<size_t>{});
      current_statement__ = 10;
      context__.validate_dims("parameter initialization", "mx0", "double",
        std::vector<size_t>{});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ theta = DUMMY_VAR__;
      current_statement__ = 1;
      theta = context__.vals_r("theta")[(1 - 1)];
      out__.write(theta);
      Eigen::Matrix<local_scalar_t__,-1,1> alpha =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> alpha_flat__;
        current_statement__ = 2;
        alpha_flat__ = context__.vals_r("alpha");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 2;
          stan::model::assign(alpha, alpha_flat__[(pos__ - 1)],
            "assigning variable alpha", stan::model::index_uni(sym1__));
          current_statement__ = 2;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(alpha);
      Eigen::Matrix<local_scalar_t__,-1,1> bx0 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> bx0_flat__;
        current_statement__ = 3;
        bx0_flat__ = context__.vals_r("bx0");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 3;
          stan::model::assign(bx0, bx0_flat__[(pos__ - 1)],
            "assigning variable bx0", stan::model::index_uni(sym1__));
          current_statement__ = 3;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(bx0);
      Eigen::Matrix<local_scalar_t__,-1,1> a =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> a_flat__;
        current_statement__ = 4;
        a_flat__ = context__.vals_r("a");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 4;
          stan::model::assign(a, a_flat__[(pos__ - 1)],
            "assigning variable a", stan::model::index_uni(sym1__));
          current_statement__ = 4;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(0, a);
      Eigen::Matrix<local_scalar_t__,-1,1> b =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> b_flat__;
        current_statement__ = 5;
        b_flat__ = context__.vals_r("b");
        current_statement__ = 5;
        pos__ = 1;
        current_statement__ = 5;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 5;
          stan::model::assign(b, b_flat__[(pos__ - 1)],
            "assigning variable b", stan::model::index_uni(sym1__));
          current_statement__ = 5;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(0, b);
      Eigen::Matrix<local_scalar_t__,-1,1> r =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> r_flat__;
        current_statement__ = 6;
        r_flat__ = context__.vals_r("r");
        current_statement__ = 6;
        pos__ = 1;
        current_statement__ = 6;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 6;
          stan::model::assign(r, r_flat__[(pos__ - 1)],
            "assigning variable r", stan::model::index_uni(sym1__));
          current_statement__ = 6;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lub(0, 1, r);
      local_scalar_t__ c = DUMMY_VAR__;
      current_statement__ = 7;
      c = context__.vals_r("c")[(1 - 1)];
      out__.write_free_lb(0, c);
      local_scalar_t__ d = DUMMY_VAR__;
      current_statement__ = 8;
      d = context__.vals_r("d")[(1 - 1)];
      out__.write_free_lb(0, d);
      local_scalar_t__ vx0 = DUMMY_VAR__;
      current_statement__ = 9;
      vx0 = context__.vals_r("vx0")[(1 - 1)];
      out__.write_free_lb(0, vx0);
      local_scalar_t__ mx0 = DUMMY_VAR__;
      current_statement__ = 10;
      mx0 = context__.vals_r("mx0")[(1 - 1)];
      out__.write(mx0);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"theta", "alpha", "bx0", "a", "b",
                "r", "c", "d", "vx0", "mx0"};
    if (emit_transformed_parameters__) {
      std::vector<std::string> temp{"phi", "rho", "mu", "tau"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(N)},
                std::vector<size_t>{static_cast<size_t>(N)},
                std::vector<size_t>{static_cast<size_t>(N)},
                std::vector<size_t>{static_cast<size_t>(N)},
                std::vector<size_t>{static_cast<size_t>(N)},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{}, std::vector<size_t>{}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(N)},
             std::vector<size_t>{static_cast<size_t>(N)},
             std::vector<size_t>{static_cast<size_t>(N)},
             std::vector<size_t>{}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "theta");
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      param_names__.emplace_back(std::string() + "alpha" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      param_names__.emplace_back(std::string() + "bx0" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      param_names__.emplace_back(std::string() + "a" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      param_names__.emplace_back(std::string() + "b" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      param_names__.emplace_back(std::string() + "r" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "c");
    param_names__.emplace_back(std::string() + "d");
    param_names__.emplace_back(std::string() + "vx0");
    param_names__.emplace_back(std::string() + "mx0");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "phi" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "rho" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "mu" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "tau");
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "theta");
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      param_names__.emplace_back(std::string() + "alpha" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      param_names__.emplace_back(std::string() + "bx0" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      param_names__.emplace_back(std::string() + "a" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      param_names__.emplace_back(std::string() + "b" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      param_names__.emplace_back(std::string() + "r" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "c");
    param_names__.emplace_back(std::string() + "d");
    param_names__.emplace_back(std::string() + "vx0");
    param_names__.emplace_back(std::string() + "mx0");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "phi" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "rho" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "mu" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "tau");
    }
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"theta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"bx0\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"a\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"b\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"r\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"c\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"d\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"vx0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mx0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"rho\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"tau\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"theta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"bx0\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"a\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"b\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"r\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"c\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"d\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"vx0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mx0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"rho\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"tau\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((((((1 + N) + N) + N) + N) + N) + 1) + 1)
      + 1) + 1);
    const size_t num_transformed = emit_transformed_parameters * ((((N + N) +
      N) + 1));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((((((1 + N) + N) + N) + N) + N) + 1) + 1)
      + 1) + 1);
    const size_t num_transformed = emit_transformed_parameters * ((((N + N) +
      N) + 1));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_mr_horse_namespace::model_mr_horse;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_mr_horse_namespace::profiles__;
}
#endif
#endif
